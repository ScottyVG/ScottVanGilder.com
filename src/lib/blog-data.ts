// This file contains pre-generated blog data for client-side use
// Auto-generated by scripts/sync-blog-data.js - DO NOT EDIT MANUALLY
import { parseBlogDate } from './date-utils';

export interface BlogPostMeta {
  slug: string;
  title: string;
  excerpt: string;
  date: string;
  readTime: string;
  tags: string[];
  author?: string;
}

export const blogPosts: BlogPostMeta[] = [
  {
    "slug": "2025-07-06-welcome-and-thanks-for-stopping-by",
    "title": "Welcome, and Thanks for Stopping By!",
    "excerpt": "I'm Scott Van Gilder, a DevOps consultant at AWS. I grew up in small-town Iowa, studied engineering at Iowa State, and discovered my passion for coding. Now I live in Superior, Colorado, with my wife and son, enjoying running, biking, hiking, and snowboarding. This blog shares my journey, tech insights, and life out west. Thanks for reading!",
    "date": "2025-07-06",
    "readTime": "2 min read",
    "tags": [
      "First Post",
      "Blogging Journey",
      "Tech"
    ],
    "author": "Scott Van Gilder"
  },
  {
    "slug": "2025-07-07-why-im-starting-this-blog",
    "title": "Why I’m Starting This Blog (and Why Now)",
    "excerpt": "I’m finally starting this blog to share my journey through tech, personal projects, and life. GenAI has helped me cut through the noise and just begin writing. Expect a stream of thoughts on cloud development, travel, and the outdoors—and maybe help others along the way. Thanks for joining me on this ride!",
    "date": "2025-07-07",
    "readTime": "3 min read",
    "tags": [
      "Blogging Journey",
      "GenAI",
      "DevOps",
      "Tech"
    ],
    "author": "Scott Van Gilder"
  },
  {
    "slug": "2025-07-08-everything-as-a-lambda-the-swiss-army-knife-of-aws",
    "title": "Everything as a Lambda: The Swiss Army Knife of AWS",
    "excerpt": "AWS Lambda isn’t just for APIs—it’s my secret weapon for solving odd problems fast. From custom resource automation to integrating external services like certificate APIs, Lambda acts as my Swiss Army knife in the cloud. In this post, I share how “everything as a Lambda” helps me keep projects efficient, flexible, and fun.",
    "date": "2025-07-08",
    "readTime": "5 minutes",
    "tags": [
      "AWS Lambda",
      "Serverless",
      "AWS",
      "DevOps",
      "Tech"
    ],
    "author": "Scott Van Gilder"
  },
  {
    "slug": "2025-07-09-rebuilding-scottvangilder-com-from-static-html-to-modern-nextjs",
    "title": "Rebuilding ScottVanGilder.com: From Static HTML to Modern Next.js - A Vibe Coding Journey",
    "excerpt": "From bootcamp-era HTML/CSS to a modern Next.js blog with automated deployment - how I rebuilt my personal website in a single evening using AI-assisted development, and what I learned about the balance between GenAI productivity and deep technical understanding.",
    "date": "2025-07-09",
    "readTime": "8 min read",
    "tags": [
      "WebDev",
      "NextJS",
      "Gen AI",
      "Personal Projects",
      "AWS",
      "Dev Ops",
      "Tech"
    ],
    "author": "Scott Van Gilder"
  },
  {
    "slug": "2025-07-12-mastering-productivity-with-getting-things-done-a-system-that-actually-works",
    "title": "Mastering Productivity with Getting Things Done: A System That Actually Works",
    "excerpt": "Discover how David Allen's Getting Things Done methodology can transform your productivity and mental clarity. Learn the five-step workflow that has helped me achieve successful outcomes in both personal and professional life.",
    "date": "2025-07-12",
    "readTime": "8 min read",
    "tags": [
      "Productivity",
      "GTD",
      "ADHD",
      "Personal Development",
      "Time Management"
    ],
    "author": "Scott Van Gilder"
  }
];

export function getAllPosts(): BlogPostMeta[] {
  return blogPosts.sort((a, b) => 
    parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime()
  );
}

export function getPostsByTag(tag: string): BlogPostMeta[] {
  return blogPosts.filter(post => 
    post.tags.some(postTag => postTag.toLowerCase() === tag.toLowerCase())
  ).sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime());
}

export function getAllTags(): { tag: string; count: number }[] {
  const tagCounts: Record<string, number> = {};

  blogPosts.forEach(post => {
    post.tags.forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  });

  return Object.entries(tagCounts)
    .map(([tag, count]) => ({ tag, count }))
    .sort((a, b) => b.count - a.count);
}

export function getPostsByDateRange(year?: number, month?: number): BlogPostMeta[] {
  return blogPosts.filter(post => {
    const postDate = parseBlogDate(post.date);
    const postYear = postDate.getFullYear();
    const postMonth = postDate.getMonth() + 1;

    if (year && month) {
      return postYear === year && postMonth === month;
    } else if (year) {
      return postYear === year;
    }
    return true;
  }).sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime());
}

export function getArchiveData(): { year: number; month: number; count: number; posts: BlogPostMeta[] }[] {
  const archiveMap: Record<string, BlogPostMeta[]> = {};

  blogPosts.forEach(post => {
    const date = parseBlogDate(post.date);
    const key = `${date.getFullYear()}-${date.getMonth() + 1}`;
    if (!archiveMap[key]) {
      archiveMap[key] = [];
    }
    archiveMap[key].push(post);
  });

  return Object.entries(archiveMap)
    .map(([key, posts]) => {
      const [year, month] = key.split('-').map(Number);
      return {
        year,
        month,
        count: posts.length,
        posts: posts.sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime())
      };
    })
    .sort((a, b) => {
      if (a.year !== b.year) return b.year - a.year;
      return b.month - a.month;
    });
}
