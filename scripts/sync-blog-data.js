#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

const CONTENT_DIR = path.join(__dirname, '../content/blog');
const OUTPUT_FILE = path.join(__dirname, '../src/lib/blog-data.ts');

function generateSlugFromFilename(filename) {
  return filename.replace(/\.md$/, '');
}

function syncBlogData() {
  console.log('🔄 Syncing blog data from markdown files...');
  
  // Read all markdown files from content/blog
  const files = fs.readdirSync(CONTENT_DIR)
    .filter(file => file.endsWith('.md'))
    .sort();

  const blogPosts = [];

  for (const file of files) {
    const filePath = path.join(CONTENT_DIR, file);
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const { data: frontmatter } = matter(fileContent);
    
    const slug = generateSlugFromFilename(file);
    
    // Validate required fields
    if (!frontmatter.title || !frontmatter.excerpt || !frontmatter.date) {
      console.warn(`⚠️  Warning: ${file} is missing required frontmatter fields (title, excerpt, date)`);
      continue;
    }

    const post = {
      slug,
      title: frontmatter.title,
      excerpt: frontmatter.excerpt,
      date: frontmatter.date,
      readTime: frontmatter.readTime || '5 min read',
      tags: frontmatter.tags || [],
      author: frontmatter.author || 'Scott Van Gilder'
    };

    blogPosts.push(post);
  }

  // Generate the TypeScript file content
  const tsContent = `// This file contains pre-generated blog data for client-side use
// Auto-generated by scripts/sync-blog-data.js - DO NOT EDIT MANUALLY
import { parseBlogDate } from './date-utils';

export interface BlogPostMeta {
  slug: string;
  title: string;
  excerpt: string;
  date: string;
  readTime: string;
  tags: string[];
  author?: string;
}

export const blogPosts: BlogPostMeta[] = ${JSON.stringify(blogPosts, null, 2)};

export function getAllPosts(): BlogPostMeta[] {
  return blogPosts.sort((a, b) => 
    parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime()
  );
}

export function getPostsByTag(tag: string): BlogPostMeta[] {
  return blogPosts.filter(post => 
    post.tags.some(postTag => postTag.toLowerCase() === tag.toLowerCase())
  ).sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime());
}

export function getAllTags(): { tag: string; count: number }[] {
  const tagCounts: Record<string, number> = {};

  blogPosts.forEach(post => {
    post.tags.forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  });

  return Object.entries(tagCounts)
    .map(([tag, count]) => ({ tag, count }))
    .sort((a, b) => b.count - a.count);
}

export function getPostsByDateRange(year?: number, month?: number): BlogPostMeta[] {
  return blogPosts.filter(post => {
    const postDate = parseBlogDate(post.date);
    const postYear = postDate.getFullYear();
    const postMonth = postDate.getMonth() + 1;

    if (year && month) {
      return postYear === year && postMonth === month;
    } else if (year) {
      return postYear === year;
    }
    return true;
  }).sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime());
}

export function getArchiveData(): { year: number; month: number; count: number; posts: BlogPostMeta[] }[] {
  const archiveMap: Record<string, BlogPostMeta[]> = {};

  blogPosts.forEach(post => {
    const date = parseBlogDate(post.date);
    const key = \`\${date.getFullYear()}-\${date.getMonth() + 1}\`;
    if (!archiveMap[key]) {
      archiveMap[key] = [];
    }
    archiveMap[key].push(post);
  });

  return Object.entries(archiveMap)
    .map(([key, posts]) => {
      const [year, month] = key.split('-').map(Number);
      return {
        year,
        month,
        count: posts.length,
        posts: posts.sort((a, b) => parseBlogDate(b.date).getTime() - parseBlogDate(a.date).getTime())
      };
    })
    .sort((a, b) => {
      if (a.year !== b.year) return b.year - a.year;
      return b.month - a.month;
    });
}
`;

  // Write the generated file
  fs.writeFileSync(OUTPUT_FILE, tsContent);
  
  console.log(`✅ Successfully synced ${blogPosts.length} blog posts to ${OUTPUT_FILE}`);
  console.log('📝 Generated posts:');
  blogPosts.forEach(post => {
    console.log(`   - ${post.slug} (${post.date})`);
  });
}

// Run the sync
if (require.main === module) {
  syncBlogData();
}

module.exports = { syncBlogData };